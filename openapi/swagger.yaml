openapi: 3.0.3
info:
  title: Fauxify API
  version: 1.0.0
  description: API for managing artists, albums, songs, and analytics.

paths:
  /artists:
    get:
      summary: Get all artists
      responses:
        '200':
          description: A list of artists
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  count:
                    type: integer
    post:
      summary: Create an artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '201':
          description: Artist created
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /artists/{id}:
    get:
      summary: Get artist by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Artist data
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Artist'
        '404':
          description: Artist not found

  /albums:
    get:
      summary: Get all albums
      responses:
        '200':
          description: A list of albums
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Album'
                  count:
                    type: integer

  /albums/{id}:
    get:
      summary: Get album by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Album with songs
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Album'
        '404':
          description: Album not found

  /songs:
    get:
      summary: Get all songs
      responses:
        '200':
          description: A list of songs
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
                  count:
                    type: integer

  /songs/{id}:
    get:
      summary: Get song by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Song
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/Song'
        '404':
          description: Song not found

  /analytics:
    post:
      summary: Submit song analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongAnalyticsInput'
      responses:
        '201':
          description: Analytics created
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/SongAnalytics'
        '400':
          description: Invalid request
        '500':
          description: Server error

components:
  schemas:
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        country:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'

    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artistId:
          type: string
          format: uuid
        releaseDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'

    Song:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        albumId:
          type: string
          format: uuid
        trackNumber:
          type: integer
        durationSeconds:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SongAnalyticsInput:
      type: object
      required:
        - songId
        - playTime
        - userId
      properties:
        songId:
          type: string
          format: uuid
        playTime:
          type: integer
        userId:
          type: string
          format: uuid

    SongAnalytics:
      allOf:
        - $ref: '#/components/schemas/SongAnalyticsInput'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
